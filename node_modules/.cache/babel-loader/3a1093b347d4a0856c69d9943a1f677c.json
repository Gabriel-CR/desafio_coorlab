{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { MainContainer, Navbar, FormContainer, OutputContainer, InputContainer, InfoFrete } from \"@/components/styles.js\";\nexport default {\n  components: {\n    MainContainer: MainContainer,\n    Navbar: Navbar,\n    FormContainer: FormContainer,\n    OutputContainer: OutputContainer,\n    InputContainer: InputContainer,\n    InfoFrete: InfoFrete\n  },\n  data: function data() {\n    return {\n      appName: \"\",\n      showOutput: false,\n      data: [],\n      citys: [],\n      city: \"Selecione o destino\",\n      weight: \"\",\n      frete: {\n        menorValor: {\n          transportadora: \"\",\n          tempo: \"\",\n          preco: \"\"\n        },\n        maisRapido: {\n          transportadora: \"\",\n          tempo: \"\",\n          preco: \"\"\n        }\n      }\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    // Implemente aqui o GET dos dados da API REST\n    // para que isso ocorra na inicialização da pagina\n    fetch(\"http://localhost:3000/transport\").then(function (response) {\n      response.json().then(function (data) {\n        _this.data = data;\n      });\n    }).catch(function (err) {\n      console.log(err);\n    });\n    this.appName = \"Melhor Frete\";\n  },\n  methods: {\n    // Implemente aqui os metodos utilizados na pagina\n    methodFoo: function methodFoo() {\n      console.log(this.appName);\n    },\n    handleSubmit: function handleSubmit(event) {\n      event.preventDefault(); // verificar se os campos estão preenchidos\n\n      if (this.city === \"Selecione o destino\" || this.weight === \"\" || this.weight == 0) {\n        this.$alert(\"\", \"Insira os valores para realizar a análise\", \"warning\");\n        return;\n      } // calcular o frete\n\n\n      this.calculate();\n      this.showOutput = true;\n    },\n    calculate: function calculate() {\n      var city = this.city,\n          weight = this.weight;\n      var availableTransporters = this.data.filter(function (transporter) {\n        return transporter.city === city;\n      }); // encontrar frete com menor valor para a cidade\n\n      var menorValor = this.findLowerCostTransporter(availableTransporters, weight); // encontrar frete mais rápido para a cidade\n\n      var maisRapido = this.findFastestTransporter(availableTransporters, weight);\n      this.frete.menorValor = {\n        transportadora: menorValor.name,\n        tempo: menorValor.lead_time,\n        preco: this.calculateTotalPrice(menorValor, weight).toFixed(2).replace(\".\", \",\")\n      };\n      this.frete.maisRapido = {\n        transportadora: maisRapido.name,\n        tempo: maisRapido.lead_time,\n        preco: this.calculateTotalPrice(maisRapido, weight).toFixed(2).replace(\".\", \",\")\n      };\n    },\n    findLowerCostTransporter: function findLowerCostTransporter(transporters, weight) {\n      var _this2 = this;\n\n      return transporters.reduce(function (prev, current) {\n        var prevCost = weight > 100 ? prev.cost_transport_heavy : prev.cost_transport_light;\n        var currentCost = weight > 100 ? current.cost_transport_heavy : current.cost_transport_light;\n\n        if (_this2.convertCashToFloat(prevCost) < _this2.convertCashToFloat(currentCost)) {\n          return prev;\n        } else {\n          return current;\n        }\n      });\n    },\n    findFastestTransporter: function findFastestTransporter(transporters) {\n      var _this3 = this;\n\n      return transporters.reduce(function (prev, current) {\n        if (_this3.convertTimeToFloat(prev.lead_time) < _this3.convertTimeToFloat(current.lead_time)) {\n          return prev;\n        } else {\n          return current;\n        }\n      });\n    },\n    calculateTotalPrice: function calculateTotalPrice(transporter, weight) {\n      var cost = weight > 100 ? transporter.cost_transport_heavy : transporter.cost_transport_light;\n      return this.convertCashToFloat(cost) * weight;\n    },\n    convertCashToFloat: function convertCashToFloat(value) {\n      return parseFloat(value.replace(\"R$ \", \"\").replace(\",\", \".\"));\n    },\n    convertTimeToFloat: function convertTimeToFloat(value) {\n      return parseInt(value.replace(\"h\", \"\"));\n    },\n    clear: function clear(event) {\n      event.preventDefault();\n      this.showOutput = false;\n      this.city = \"Selecione o destino\";\n      this.weight = \"\";\n      this.frete = {\n        menorValor: {\n          transportadora: \"\",\n          tempo: \"\",\n          preco: \"\"\n        },\n        maisRapido: {\n          transportadora: \"\",\n          tempo: \"\",\n          preco: \"\"\n        }\n      };\n    }\n  },\n  watch: {\n    data: function data() {\n      var _this4 = this;\n\n      this.data.forEach(function (element) {\n        _this4.citys.push({\n          city: element.city,\n          key: element.id\n        });\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiGA,SACAA,aADA,EAEAC,MAFA,EAGAC,aAHA,EAIAC,eAJA,EAKAC,cALA,EAMAC,SANA,QAOA,wBAPA;AASA;AACAC;AACAN,gCADA;AAEAC,kBAFA;AAGAC,gCAHA;AAIAC,oCAJA;AAKAC,kCALA;AAMAC;AANA,GADA;AASAE,MATA,kBASA;AACA;AACAC,iBADA;AAEAC,uBAFA;AAGAF,cAHA;AAIAG,eAJA;AAMAC,iCANA;AAOAC,gBAPA;AASAC;AACAC;AACAC,4BADA;AAEAC,mBAFA;AAGAC;AAHA,SADA;AAMAC;AACAH,4BADA;AAEAC,mBAFA;AAGAC;AAHA;AANA;AATA;AAsBA,GAhCA;AAiCAE,SAjCA,qBAiCA;AAAA;;AACA;AACA;AAEAC,6CACAC,IADA,CACA;AACAC;AACA;AACA,OAFA;AAGA,KALA,EAMAC,KANA,CAMA;AACAC;AACA,KARA;AAUA;AACA,GAhDA;AAiDAC;AACA;AACAC,aAFA,uBAEA;AACAF;AACA,KAJA;AAKAG,gBALA,wBAKAC,KALA,EAKA;AACAA,6BADA,CAGA;;AACA,UACA,uCACA,kBADA,IAEA,gBAHA,EAIA;AACA;AACA;AACA,OAXA,CAaA;;;AACA;AAEA;AACA,KAtBA;AAuBAC,aAvBA,uBAuBA;AACA;AAAA;AACA,mDACA;AAAA;AAAA,OADA,EAFA,CAKA;;AACA,qDACAC,qBADA,EAEAlB,MAFA,EANA,CAWA;;AACA,mDACAkB,qBADA,EAEAlB,MAFA;AAKA;AACAG,uCADA;AAEAC,mCAFA;AAGAC,4DACAc,OADA,CACA,CADA,EAEAC,OAFA,CAEA,GAFA,EAEA,GAFA;AAHA;AAQA;AACAjB,uCADA;AAEAC,mCAFA;AAGAC,4DACAc,OADA,CACA,CADA,EAEAC,OAFA,CAEA,GAFA,EAEA,GAFA;AAHA;AAOA,KAvDA;AAwDAC,4BAxDA,oCAwDAC,YAxDA,EAwDAtB,MAxDA,EAwDA;AAAA;;AACA;AACA,uBACAA,oEADA;AAEA,0BACAA,eACAuB,4BADA,GAEAA,4BAHA;;AAKA,YACA,sCACA,sCAFA,EAGA;AACA;AACA,SALA,MAKA;AACA;AACA;AACA,OAhBA;AAiBA,KA1EA;AA2EAC,0BA3EA,kCA2EAF,YA3EA,EA2EA;AAAA;;AACA;AACA,YACA,4CACA,4CAFA,EAGA;AACA;AACA,SALA,MAKA;AACA;AACA;AACA,OATA;AAUA,KAtFA;AAuFAG,uBAvFA,+BAuFAC,WAvFA,EAuFA1B,MAvFA,EAuFA;AACA,iBACAA,eACA0B,gCADA,GAEAA,gCAHA;AAKA;AACA,KA9FA;AA+FAC,sBA/FA,8BA+FAC,KA/FA,EA+FA;AACA;AACA,KAjGA;AAkGAC,sBAlGA,8BAkGAD,KAlGA,EAkGA;AACA;AACA,KApGA;AAqGAE,SArGA,iBAqGAd,KArGA,EAqGA;AACAA;AACA;AACA;AACA;AACA;AACAd;AACAC,4BADA;AAEAC,mBAFA;AAGAC;AAHA,SADA;AAMAC;AACAH,4BADA;AAEAC,mBAFA;AAGAC;AAHA;AANA;AAYA;AAtHA,GAjDA;AAyKA0B;AACApC,QADA,kBACA;AAAA;;AACA;AACA;AAAAI;AAAAiC;AAAA;AACA,OAFA;AAGA;AALA;AAzKA","names":["MainContainer","Navbar","FormContainer","OutputContainer","InputContainer","InfoFrete","components","data","appName","showOutput","citys","city","weight","frete","menorValor","transportadora","tempo","preco","maisRapido","created","fetch","then","response","catch","console","methods","methodFoo","handleSubmit","event","calculate","availableTransporters","toFixed","replace","findLowerCostTransporter","transporters","current","findFastestTransporter","calculateTotalPrice","transporter","convertCashToFloat","value","convertTimeToFloat","clear","watch","key"],"sourceRoot":"src/components","sources":["BestTransport.vue"],"sourcesContent":["<template>\n  <div class=\"title\">\n    <Navbar>\n      <img :src=\"require('../assets/logo.png')\" alt=\"Logo da empresa\" />\n      <b>{{ appName }}</b>\n    </Navbar>\n\n    <MainContainer>\n      <FormContainer>\n        <div class=\"title\">\n          <img\n            :src=\"require('../assets/map-clock.png')\"\n            alt=\"mapa com um relógio\"\n          />\n          <h1>Insira o destino e o peso</h1>\n        </div>\n\n        <!-- input de destino -->\n        <InputContainer>\n          <label for=\"cidade\">Destino</label>\n          <select v-model=\"city\">\n            <option selected>Selecione o destino</option>\n            <option v-for=\"c in citys\" :key=\"c.id\">\n              {{ c.city }}\n            </option>\n          </select>\n        </InputContainer>\n\n        <!-- input de peso -->\n        <InputContainer>\n          <label for=\"peso\">Peso</label>\n          <input placeholder=\"300 kg\" type=\"number\" v-model=\"weight\" />\n        </InputContainer>\n\n        <!-- botao de analisar -->\n        <button v-on:click=\"handleSubmit\">Analisar</button>\n      </FormContainer>\n\n      <!-- saida dos dados -->\n      <OutputContainer>\n        <div v-if=\"showOutput\">\n          <h2>\n            Estas são as melhores alternativas de frete que encontramos para\n            você.\n          </h2>\n          <!-- frete mais barato -->\n          <InfoFrete>\n            <div class=\"info\">\n              <div class=\"img-container\">\n                <img\n                  :src=\"require('../assets/give-money.png')\"\n                  alt=\"mão com moeda\"\n                />\n              </div>\n\n              <div class=\"info-text\">\n                <p><strong>Frete com menor valor</strong></p>\n                <p>Transportadora: {{ frete.menorValor.transportadora }}</p>\n                <p>Tempo estimado: {{ frete.menorValor.tempo }}</p>\n              </div>\n            </div>\n\n            <div class=\"price\">\n              <p><strong>Preço</strong></p>\n              <p>{{ frete.menorValor.preco }}</p>\n            </div>\n          </InfoFrete>\n          <!-- frete com entrega mais rápida -->\n          <InfoFrete>\n            <div class=\"info\">\n              <div class=\"img-container\">\n                <img :src=\"require('../assets/time.png')\" alt=\"mão com moeda\" />\n              </div>\n\n              <div class=\"info-text\">\n                <p><strong>Frete mais rápido</strong></p>\n                <p>Transportadora: {{ frete.maisRapido.transportadora }}</p>\n                <p>Tempo estimado: {{ frete.maisRapido.tempo }}</p>\n              </div>\n            </div>\n\n            <div class=\"price\">\n              <p><strong>Preço</strong></p>\n              <p>{{ frete.maisRapido.preco }}</p>\n            </div>\n          </InfoFrete>\n\n          <button v-on:click=\"clear\">Limpar</button>\n        </div>\n\n        <h2 v-else>Nenhum dado selecionado</h2>\n      </OutputContainer>\n    </MainContainer>\n  </div>\n</template>\n\n<script>\nimport {\n  MainContainer,\n  Navbar,\n  FormContainer,\n  OutputContainer,\n  InputContainer,\n  InfoFrete,\n} from \"@/components/styles.js\";\n\nexport default {\n  components: {\n    MainContainer,\n    Navbar,\n    FormContainer,\n    OutputContainer,\n    InputContainer,\n    InfoFrete,\n  },\n  data() {\n    return {\n      appName: \"\",\n      showOutput: false,\n      data: [],\n      citys: [],\n\n      city: \"Selecione o destino\",\n      weight: \"\",\n\n      frete: {\n        menorValor: {\n          transportadora: \"\",\n          tempo: \"\",\n          preco: \"\",\n        },\n        maisRapido: {\n          transportadora: \"\",\n          tempo: \"\",\n          preco: \"\",\n        },\n      },\n    };\n  },\n  created() {\n    // Implemente aqui o GET dos dados da API REST\n    // para que isso ocorra na inicialização da pagina\n\n    fetch(\"http://localhost:3000/transport\")\n      .then((response) => {\n        response.json().then((data) => {\n          this.data = data;\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n\n    this.appName = \"Melhor Frete\";\n  },\n  methods: {\n    // Implemente aqui os metodos utilizados na pagina\n    methodFoo() {\n      console.log(this.appName);\n    },\n    handleSubmit(event) {\n      event.preventDefault();\n\n      // verificar se os campos estão preenchidos\n      if (\n        this.city === \"Selecione o destino\" ||\n        this.weight === \"\" ||\n        this.weight == 0\n      ) {\n        this.$alert(\"\", \"Insira os valores para realizar a análise\", \"warning\");\n        return;\n      }\n\n      // calcular o frete\n      this.calculate();\n\n      this.showOutput = true;\n    },\n    calculate() {\n      const { city, weight } = this;\n      const availableTransporters = this.data.filter(\n        (transporter) => transporter.city === city\n      );\n      // encontrar frete com menor valor para a cidade\n      const menorValor = this.findLowerCostTransporter(\n        availableTransporters,\n        weight\n      );\n\n      // encontrar frete mais rápido para a cidade\n      const maisRapido = this.findFastestTransporter(\n        availableTransporters,\n        weight\n      );\n\n      this.frete.menorValor = {\n        transportadora: menorValor.name,\n        tempo: menorValor.lead_time,\n        preco: this.calculateTotalPrice(menorValor, weight)\n          .toFixed(2)\n          .replace(\".\", \",\"),\n      };\n\n      this.frete.maisRapido = {\n        transportadora: maisRapido.name,\n        tempo: maisRapido.lead_time,\n        preco: this.calculateTotalPrice(maisRapido, weight)\n          .toFixed(2)\n          .replace(\".\", \",\"),\n      };\n    },\n    findLowerCostTransporter(transporters, weight) {\n      return transporters.reduce((prev, current) => {\n        const prevCost =\n          weight > 100 ? prev.cost_transport_heavy : prev.cost_transport_light;\n        const currentCost =\n          weight > 100\n            ? current.cost_transport_heavy\n            : current.cost_transport_light;\n\n        if (\n          this.convertCashToFloat(prevCost) <\n          this.convertCashToFloat(currentCost)\n        ) {\n          return prev;\n        } else {\n          return current;\n        }\n      });\n    },\n    findFastestTransporter(transporters) {\n      return transporters.reduce((prev, current) => {\n        if (\n          this.convertTimeToFloat(prev.lead_time) <\n          this.convertTimeToFloat(current.lead_time)\n        ) {\n          return prev;\n        } else {\n          return current;\n        }\n      });\n    },\n    calculateTotalPrice(transporter, weight) {\n      const cost =\n        weight > 100\n          ? transporter.cost_transport_heavy\n          : transporter.cost_transport_light;\n\n      return this.convertCashToFloat(cost) * weight;\n    },\n    convertCashToFloat(value) {\n      return parseFloat(value.replace(\"R$ \", \"\").replace(\",\", \".\"));\n    },\n    convertTimeToFloat(value) {\n      return parseInt(value.replace(\"h\", \"\"));\n    },\n    clear(event) {\n      event.preventDefault();\n      this.showOutput = false;\n      this.city = \"Selecione o destino\";\n      this.weight = \"\";\n      this.frete = {\n        menorValor: {\n          transportadora: \"\",\n          tempo: \"\",\n          preco: \"\",\n        },\n        maisRapido: {\n          transportadora: \"\",\n          tempo: \"\",\n          preco: \"\",\n        },\n      };\n    },\n  },\n  watch: {\n    data() {\n      this.data.forEach((element) => {\n        this.citys.push({ city: element.city, key: element.id });\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.title .navbar {\n  background-color: #00aca6 !important;\n}\n\n.title .navbar-brand {\n  margin-left: 20px;\n}\n\n.title .navbar-brand img {\n  margin-right: 10px;\n  width: 30px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}