{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Navbar from \"./Navbar.vue\";\nimport Form from \"./Form.vue\";\nimport Output from \"./Output.vue\";\nimport { MainContainer } from \"./styles.js\";\nexport default {\n  name: \"MainComponent\",\n  components: {\n    Navbar: Navbar,\n    Form: Form,\n    Output: Output,\n    MainContainer: MainContainer\n  },\n  data: function data() {\n    return {\n      appName: \"\",\n      showOutput: false,\n      data: [],\n      citys: [],\n      city: \"Selecione o destino\",\n      weight: \"\",\n      frete: {\n        menorValor: {\n          transportadora: \"\",\n          tempo: \"\",\n          preco: \"\"\n        },\n        maisRapido: {\n          transportadora: \"\",\n          tempo: \"\",\n          preco: \"\"\n        }\n      }\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    // Implemente aqui o GET dos dados da API REST\n    // para que isso ocorra na inicialização da pagina\n    fetch(\"http://localhost:3000/transport\").then(function (response) {\n      response.json().then(function (data) {\n        _this.data = data;\n      });\n    }).catch(function (err) {\n      console.log(err);\n    });\n    this.appName = \"Melhor Frete\";\n  },\n  methods: {\n    emitClear: function emitClear() {\n      console.log(\"clear\");\n      this.showOutput = false;\n      this.city = \"Selecione o destino\";\n      this.weight = \"\";\n      this.frete = {\n        menorValor: {\n          transportadora: \"\",\n          tempo: \"\",\n          preco: \"\"\n        },\n        maisRapido: {\n          transportadora: \"\",\n          tempo: \"\",\n          preco: \"\"\n        }\n      };\n    },\n    handleSubmit: function handleSubmit() {\n      // verificar se os campos estão preenchidos\n      if (this.city === \"Selecione o destino\" || this.weight === \"\" || this.weight == 0) {\n        this.$alert(\"\", \"Insira os valores para realizar a análise\", \"warning\");\n        return;\n      } // calcular o frete\n\n\n      this.calculate();\n      this.showOutput = true;\n    },\n    calculate: function calculate() {\n      var city = this.city,\n          weight = this.weight;\n      var availableTransporters = this.data.filter(function (transporter) {\n        return transporter.city === city;\n      }); // encontrar frete com menor valor para a cidade\n\n      var menorValor = this.findLowerCostTransporter(availableTransporters, weight); // encontrar frete mais rápido para a cidade\n\n      var maisRapido = this.findFastestTransporter(availableTransporters, weight);\n      this.frete.menorValor = {\n        transportadora: menorValor.name,\n        tempo: menorValor.lead_time,\n        preco: this.calculateTotalPrice(menorValor, weight).toFixed(2).replace(\".\", \",\")\n      };\n      this.frete.maisRapido = {\n        transportadora: maisRapido.name,\n        tempo: maisRapido.lead_time,\n        preco: this.calculateTotalPrice(maisRapido, weight).toFixed(2).replace(\".\", \",\")\n      };\n    },\n    findLowerCostTransporter: function findLowerCostTransporter(transporters, weight) {\n      var _this2 = this;\n\n      return transporters.reduce(function (prev, current) {\n        var prevCost = weight > 100 ? prev.cost_transport_heavy : prev.cost_transport_light;\n        var currentCost = weight > 100 ? current.cost_transport_heavy : current.cost_transport_light;\n\n        if (_this2.convertCashToFloat(prevCost) < _this2.convertCashToFloat(currentCost)) {\n          return prev;\n        } else {\n          return current;\n        }\n      });\n    },\n    findFastestTransporter: function findFastestTransporter(transporters) {\n      var _this3 = this;\n\n      return transporters.reduce(function (prev, current) {\n        if (_this3.convertTimeToFloat(prev.lead_time) < _this3.convertTimeToFloat(current.lead_time)) {\n          return prev;\n        } else {\n          return current;\n        }\n      });\n    },\n    calculateTotalPrice: function calculateTotalPrice(transporter, weight) {\n      var cost = weight > 100 ? transporter.cost_transport_heavy : transporter.cost_transport_light;\n      return this.convertCashToFloat(cost) * weight;\n    },\n    convertCashToFloat: function convertCashToFloat(value) {\n      return parseFloat(value.replace(\"R$ \", \"\").replace(\",\", \".\"));\n    },\n    convertTimeToFloat: function convertTimeToFloat(value) {\n      return parseInt(value.replace(\"h\", \"\"));\n    },\n    clear: function clear(event) {\n      event.preventDefault();\n      this.showOutput = false;\n      this.city = \"Selecione o destino\";\n      this.weight = \"\";\n      this.frete = {\n        menorValor: {\n          transportadora: \"\",\n          tempo: \"\",\n          preco: \"\"\n        },\n        maisRapido: {\n          transportadora: \"\",\n          tempo: \"\",\n          preco: \"\"\n        }\n      };\n    }\n  },\n  watch: {\n    data: function data() {\n      var _this4 = this;\n\n      this.data.forEach(function (element) {\n        _this4.citys.push({\n          city: element.city,\n          key: element.id\n        });\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AAEA;AACAA,uBADA;AAEAC;AACAC,kBADA;AAEAC,cAFA;AAGAC,kBAHA;AAIAC;AAJA,GAFA;AAQAC,MARA,kBAQA;AACA;AACAC,iBADA;AAEAC,uBAFA;AAGAF,cAHA;AAIAG,eAJA;AAMAC,iCANA;AAOAC,gBAPA;AASAC;AACAC;AACAC,4BADA;AAEAC,mBAFA;AAGAC;AAHA,SADA;AAMAC;AACAH,4BADA;AAEAC,mBAFA;AAGAC;AAHA;AANA;AATA;AAsBA,GA/BA;AAgCAE,SAhCA,qBAgCA;AAAA;;AACA;AACA;AAEAC,6CACAC,IADA,CACA;AACAC;AACA;AACA,OAFA;AAGA,KALA,EAMAC,KANA,CAMA;AACAC;AACA,KARA;AAUA;AACA,GA/CA;AAgDAC;AACAC,aADA,uBACA;AACAF;AACA;AACA;AACA;AACA;AACAV;AACAC,4BADA;AAEAC,mBAFA;AAGAC;AAHA,SADA;AAMAC;AACAH,4BADA;AAEAC,mBAFA;AAGAC;AAHA;AANA;AAYA,KAlBA;AAmBAU,gBAnBA,0BAmBA;AACA;AACA,UACA,uCACA,kBADA,IAEA,gBAHA,EAIA;AACA;AACA;AACA,OATA,CAWA;;;AACA;AAEA;AACA,KAlCA;AAmCAC,aAnCA,uBAmCA;AACA;AAAA;AACA,mDACA;AAAA;AAAA,OADA,EAFA,CAKA;;AACA,qDACAC,qBADA,EAEAjB,MAFA,EANA,CAWA;;AACA,mDACAiB,qBADA,EAEAjB,MAFA;AAKA;AACAG,uCADA;AAEAC,mCAFA;AAGAC,4DACAa,OADA,CACA,CADA,EAEAC,OAFA,CAEA,GAFA,EAEA,GAFA;AAHA;AAQA;AACAhB,uCADA;AAEAC,mCAFA;AAGAC,4DACAa,OADA,CACA,CADA,EAEAC,OAFA,CAEA,GAFA,EAEA,GAFA;AAHA;AAOA,KAnEA;AAoEAC,4BApEA,oCAoEAC,YApEA,EAoEArB,MApEA,EAoEA;AAAA;;AACA;AACA,uBACAA,oEADA;AAEA,0BACAA,eACAsB,4BADA,GAEAA,4BAHA;;AAKA,YACA,sCACA,sCAFA,EAGA;AACA;AACA,SALA,MAKA;AACA;AACA;AACA,OAhBA;AAiBA,KAtFA;AAuFAC,0BAvFA,kCAuFAF,YAvFA,EAuFA;AAAA;;AACA;AACA,YACA,4CACA,4CAFA,EAGA;AACA;AACA,SALA,MAKA;AACA;AACA;AACA,OATA;AAUA,KAlGA;AAmGAG,uBAnGA,+BAmGAC,WAnGA,EAmGAzB,MAnGA,EAmGA;AACA,iBACAA,eACAyB,gCADA,GAEAA,gCAHA;AAKA;AACA,KA1GA;AA2GAC,sBA3GA,8BA2GAC,KA3GA,EA2GA;AACA;AACA,KA7GA;AA8GAC,sBA9GA,8BA8GAD,KA9GA,EA8GA;AACA;AACA,KAhHA;AAiHAE,SAjHA,iBAiHAC,KAjHA,EAiHA;AACAA;AACA;AACA;AACA;AACA;AACA5B;AACAC,4BADA;AAEAC,mBAFA;AAGAC;AAHA,SADA;AAMAC;AACAH,4BADA;AAEAC,mBAFA;AAGAC;AAHA;AANA;AAYA;AAlIA,GAhDA;AAoLA0B;AACApC,QADA,kBACA;AAAA;;AACA;AACA;AAAAI;AAAAiC;AAAA;AACA,OAFA;AAGA;AALA;AApLA","names":["name","components","Navbar","Form","Output","MainContainer","data","appName","showOutput","citys","city","weight","frete","menorValor","transportadora","tempo","preco","maisRapido","created","fetch","then","response","catch","console","methods","emitClear","handleSubmit","calculate","availableTransporters","toFixed","replace","findLowerCostTransporter","transporters","current","findFastestTransporter","calculateTotalPrice","transporter","convertCashToFloat","value","convertTimeToFloat","clear","event","watch","key"],"sourceRoot":"src/components","sources":["MainComponent.vue"],"sourcesContent":["<template>\n  <div>\n    <Navbar :appName=\"appName\" />\n\n    <MainContainer>\n      <Form :citys=\"citys\" @emit-submit=\"receive\" />\n      <Output :showOutput=\"showOutput\" :frete=\"frete\" @emit-clear=\"emitClear\" />\n    </MainContainer>\n  </div>\n</template>\n\n<script>\nimport Navbar from \"./Navbar.vue\";\nimport Form from \"./Form.vue\";\nimport Output from \"./Output.vue\";\nimport { MainContainer } from \"./styles.js\";\n\nexport default {\n  name: \"MainComponent\",\n  components: {\n    Navbar,\n    Form,\n    Output,\n    MainContainer,\n  },\n  data() {\n    return {\n      appName: \"\",\n      showOutput: false,\n      data: [],\n      citys: [],\n\n      city: \"Selecione o destino\",\n      weight: \"\",\n\n      frete: {\n        menorValor: {\n          transportadora: \"\",\n          tempo: \"\",\n          preco: \"\",\n        },\n        maisRapido: {\n          transportadora: \"\",\n          tempo: \"\",\n          preco: \"\",\n        },\n      },\n    };\n  },\n  created() {\n    // Implemente aqui o GET dos dados da API REST\n    // para que isso ocorra na inicialização da pagina\n\n    fetch(\"http://localhost:3000/transport\")\n      .then((response) => {\n        response.json().then((data) => {\n          this.data = data;\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n\n    this.appName = \"Melhor Frete\";\n  },\n  methods: {\n    emitClear() {\n      console.log(\"clear\");\n      this.showOutput = false;\n      this.city = \"Selecione o destino\";\n      this.weight = \"\";\n      this.frete = {\n        menorValor: {\n          transportadora: \"\",\n          tempo: \"\",\n          preco: \"\",\n        },\n        maisRapido: {\n          transportadora: \"\",\n          tempo: \"\",\n          preco: \"\",\n        },\n      };\n    },\n    handleSubmit() {\n      // verificar se os campos estão preenchidos\n      if (\n        this.city === \"Selecione o destino\" ||\n        this.weight === \"\" ||\n        this.weight == 0\n      ) {\n        this.$alert(\"\", \"Insira os valores para realizar a análise\", \"warning\");\n        return;\n      }\n\n      // calcular o frete\n      this.calculate();\n\n      this.showOutput = true;\n    },\n    calculate() {\n      const { city, weight } = this;\n      const availableTransporters = this.data.filter(\n        (transporter) => transporter.city === city\n      );\n      // encontrar frete com menor valor para a cidade\n      const menorValor = this.findLowerCostTransporter(\n        availableTransporters,\n        weight\n      );\n\n      // encontrar frete mais rápido para a cidade\n      const maisRapido = this.findFastestTransporter(\n        availableTransporters,\n        weight\n      );\n\n      this.frete.menorValor = {\n        transportadora: menorValor.name,\n        tempo: menorValor.lead_time,\n        preco: this.calculateTotalPrice(menorValor, weight)\n          .toFixed(2)\n          .replace(\".\", \",\"),\n      };\n\n      this.frete.maisRapido = {\n        transportadora: maisRapido.name,\n        tempo: maisRapido.lead_time,\n        preco: this.calculateTotalPrice(maisRapido, weight)\n          .toFixed(2)\n          .replace(\".\", \",\"),\n      };\n    },\n    findLowerCostTransporter(transporters, weight) {\n      return transporters.reduce((prev, current) => {\n        const prevCost =\n          weight > 100 ? prev.cost_transport_heavy : prev.cost_transport_light;\n        const currentCost =\n          weight > 100\n            ? current.cost_transport_heavy\n            : current.cost_transport_light;\n\n        if (\n          this.convertCashToFloat(prevCost) <\n          this.convertCashToFloat(currentCost)\n        ) {\n          return prev;\n        } else {\n          return current;\n        }\n      });\n    },\n    findFastestTransporter(transporters) {\n      return transporters.reduce((prev, current) => {\n        if (\n          this.convertTimeToFloat(prev.lead_time) <\n          this.convertTimeToFloat(current.lead_time)\n        ) {\n          return prev;\n        } else {\n          return current;\n        }\n      });\n    },\n    calculateTotalPrice(transporter, weight) {\n      const cost =\n        weight > 100\n          ? transporter.cost_transport_heavy\n          : transporter.cost_transport_light;\n\n      return this.convertCashToFloat(cost) * weight;\n    },\n    convertCashToFloat(value) {\n      return parseFloat(value.replace(\"R$ \", \"\").replace(\",\", \".\"));\n    },\n    convertTimeToFloat(value) {\n      return parseInt(value.replace(\"h\", \"\"));\n    },\n    clear(event) {\n      event.preventDefault();\n      this.showOutput = false;\n      this.city = \"Selecione o destino\";\n      this.weight = \"\";\n      this.frete = {\n        menorValor: {\n          transportadora: \"\",\n          tempo: \"\",\n          preco: \"\",\n        },\n        maisRapido: {\n          transportadora: \"\",\n          tempo: \"\",\n          preco: \"\",\n        },\n      };\n    },\n  },\n  watch: {\n    data() {\n      this.data.forEach((element) => {\n        this.citys.push({ city: element.city, key: element.id });\n      });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}